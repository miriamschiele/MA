setwd("C:/Users/User/Desktop/MA/MA/1_data")
library("tidyverse")
library("tidyr")
library("ggplot2")
library("Rmisc")
library("lme4")
library("lmerTest")
library("emmeans")
library("dplyr")
library("aida")
# read in data
all.dat <- read.csv("dat_pilot_study.csv", sep=";", header=TRUE)
# information about participants
# age
min(all.dat$age, na.rm=T)
# 24 in pilot study
max(all.dat$age, na.rm=T)
# 54 in pilot study
mean(all.dat$age, na.rm=T)
# gender
table(all.dat$gender)/56 #divided by 56 because every participants had 56 trials
# education
table(all.dat$education) /56 #divided by 56 because every participants had 56 trials
nrow(all.dat)
# participants' comments on study
dat %>% pull(comments) %>% unique()
# participants' comments on study
all.dat %>% pull(comments) %>% unique()
# data sorting and cleaning
# put all filler items in a seperate data set
fillerDat <- all.dat[all.dat$trial_type == "Filler",]
nrow(fillerDat)
# rename column in filler dataset to varying acceptabiltiy of filler stimuli (A-E)
colnames(fillerDat)[colnames(fillerDat) == "fragmentType_Acceptability"] = "acceptability"
# only use critical items for analysis
dat <- all.dat[all.dat$trial_type == "Critical",]
# rename column with fragment type
colnames(dat)[colnames(dat) == "fragmentType_Acceptability"] = "fragment_type"
nrow(dat)
# 168 in pilot study
nrow(dat) == nrow(fillerDat)
# number of participants in each between-subject condition, i.e., written and auditory
table(all.dat$modality)  /56
# plotting filler items with varying acceptability
fillerDat %>%
ggplot(aes(x= acceptability, y = as.numeric(response))) +
geom_boxplot (width =0.3) +
labs(title = "Perceived naturalness of filler items wth varying acceptability",
x = "varying acceptability", y = "perceived naturalness") +
scale_x_discrete(name = "acceptability",
labels = c("A (full acceptablity)", "B (partial acceptability)",
"C (neutrality in terms of acceptability)",
"D (partial unacceptability)", "E (full unacceptability)"))+
scale_y_continuous(breaks=c(1:7))
# plotting filler items with varying acceptability
fillerDat %>%
ggplot(aes(x= acceptability, y = as.numeric(response))) +
geom_plot (width =0.3) +
labs(title = "Perceived naturalness of filler items wth varying acceptability",
x = "varying acceptability", y = "perceived naturalness") +
scale_x_discrete(name = "acceptability",
labels = c("A (full acceptablity)", "B (partial acceptability)",
"C (neutrality in terms of acceptability)",
"D (partial unacceptability)", "E (full unacceptability)"))+
scale_y_continuous(breaks=c(1:7))
# plotting filler items with varying acceptability
fillerDat %>%
ggplot(aes(x= acceptability, y = as.numeric(response))) +
geom_point (width =0.3) +
labs(title = "Perceived naturalness of filler items wth varying acceptability",
x = "varying acceptability", y = "perceived naturalness") +
scale_x_discrete(name = "acceptability",
labels = c("A (full acceptablity)", "B (partial acceptability)",
"C (neutrality in terms of acceptability)",
"D (partial unacceptability)", "E (full unacceptability)"))+
scale_y_continuous(breaks=c(1:7))
# plotting filler items with varying acceptability
fillerDat %>%
ggplot(aes(x= acceptability, y = as.numeric(response))) +
geom_point +
labs(title = "Perceived naturalness of filler items wth varying acceptability",
x = "varying acceptability", y = "perceived naturalness") +
scale_x_discrete(name = "acceptability",
labels = c("A (full acceptablity)", "B (partial acceptability)",
"C (neutrality in terms of acceptability)",
"D (partial unacceptability)", "E (full unacceptability)"))+
scale_y_continuous(breaks=c(1:7))
box
# plotting filler items with varying acceptability
fillerDat %>%
ggplot(aes(x= acceptability, y = as.numeric(response))) +
geom_boxplot (width =0.3) +
labs(title = "Perceived naturalness of filler items wth varying acceptability",
x = "varying acceptability", y = "perceived naturalness") +
scale_x_discrete(name = "acceptability",
labels = c("A (full acceptablity)", "B (partial acceptability)",
"C (neutrality in terms of acceptability)",
"D (partial unacceptability)", "E (full unacceptability)"))+
scale_y_continuous(breaks=c(1:7))
# emphasis
dat %>%
ggplot(aes(x = emphasis, y = as.numeric(response), color = emphasis)) +
geom_jitter(height = 0) +
labs(title = "Perceived naturalness of stimuli with and wihtout emphasis",
x = "emphasis", y = "perceived naturalness") +
scale_y_continuous(breaks=c(1:7))
# modality
dat %>%
ggplot(aes(x = modality, y = as.numeric(response), color = modality)) +
geom_jitter(height = 0) +
labs(title = "Perceived naturalness of auditory and written stimuli",
x = "modality", y = "perceived naturalness") +
scale_y_continuous(breaks=c(1:7))
# emphasis
dat %>%
ggplot(aes(x = emphasis, y = as.numeric(response), color = emphasis)) +
geom_boxplot (width =0.3) +
labs(title = "Perceived naturalness of stimuli with and wihtout emphasis",
x = "emphasis", y = "perceived naturalness") +
scale_y_continuous(breaks=c(1:7))
geom_jitter(height = 0)
# emphasis
dat %>%
ggplot(aes(x = emphasis, y = as.numeric(response), color = emphasis)) +
geom_jitter(height = 0) +
labs(title = "Perceived naturalness of stimuli with and wihtout emphasis",
x = "emphasis", y = "perceived naturalness") +
scale_y_continuous(breaks=c(1:7))
# modality
dat %>%
ggplot(aes(x = modality, y = as.numeric(response), color = modality)) +
geom_jitter(height = 0) +
labs(title = "Perceived naturalness of auditory and written stimuli",
x = "modality", y = "perceived naturalness") +
scale_y_continuous(breaks=c(1:7))
# fragment type
dat %>%
ggplot(aes(x = fragment_type, y = as.numeric(response),
color = fragment_type)) +
geom_jitter(height = 0) +
labs(title = "Perceived naturalness of functional and lexical fragments",
x = "fragment type", y = "perceived naturalness") +
scale_x_discrete(labels=c("functional", "lexical")) +
scale_color_discrete(name = "fragment type",
labels = c("functional", "lexical"))+
scale_y_continuous(breaks=c(1:7))
# modality and emphasis in one graph
dat %>%
ggplot(aes(x = emphasis, y = as.numeric(response), color = emphasis)) +
geom_jitter(height = 0) +
labs(title = "Auditory and written stimuli with and without emphasis",
x = "emphasis", y = "perceived naturalness") +
facet_wrap(~modality) +
scale_y_continuous(breaks=c(1:7))
# emphasis and fragment type in one graph
dat %>%
ggplot(aes(x = fragment_type, y = as.numeric(response),
color = fragment_type)) +
geom_jitter(height = 0) +
labs(title = "Functional and lexical fragments with and without emphasis",
x = "fragment type", y = "perceived naturalness", color = "fragment type") +
scale_x_discrete(labels=c("functional", "lexical")) +
scale_color_discrete(name = "fragment type",
labels = c("functional", "lexical")) +
facet_grid(~emphasis) +
scale_y_continuous(breaks=c(1:7))
# modality and fragment type in one graph
dat %>%
ggplot(aes(x = fragment_type, y = as.numeric(response),
color = fragment_type)) +
geom_jitter(height = 0) +
labs(title = "Auditory and written stimuli with functional and lexical fragments",
x = "fragment type", y = "perceived naturalness", color = "fragment type") +
scale_x_discrete(labels=c("functional", "lexical")) +
scale_color_discrete(name = "fragment type",
labels = c("functional", "lexical")) +
facet_grid(~modality) +
scale_y_continuous(breaks=c(1:7))
# all factors in one graph
dat %>%
ggplot(aes(x = fragment_type, y = as.numeric(response),
color = fragment_type)) +
geom_jitter(height = 0) +
labs(title = "Participants' ratings of all critical items",
x = "fragment type", y = "perceived naturalness",
color = "fragment type") +
scale_x_discrete(labels=c("functional", "lexical")) +
scale_color_discrete(name = "fragment type",
labels = c("functional", "lexical")) +
facet_grid(emphasis~modality) +
scale_y_continuous(breaks=c(1:7))
# differences in emphasis
dat %>%
group_by(emphasis) %>%
summarize(
mean = mean(as.numeric(response)),
SD = sd(as.numeric(response))
)
# differences in emphasis
dat %>%
group_by(emphasis) %>%
summarize(
mean = mean(as.numeric(response)),
SD = sd(as.numeric(response))
)
# differences in modality
dat %>%
group_by(modality) %>%
summarize(
mean = mean(as.numeric(response)),
SD = sd(as.numeric(response))
)
# all factors in one graph
dat %>%
ggplot(aes(x = fragment_type, y = as.numeric(response),
color = fragment_type)) +
geom_jitter(height = 0) +
labs(title = "Participants' ratings of all critical items",
x = "fragment type", y = "perceived naturalness",
color = "fragment type") +
scale_x_discrete(labels=c("functional", "lexical")) +
scale_color_discrete(name = "fragment type",
labels = c("functional", "lexical")) +
facet_grid(emphasis~modality) +
scale_y_continuous(breaks=c(1:7))
# differences in emphasis
dat %>%
group_by(emphasis) %>%
summarize(
mean = mean(as.numeric(response)),
SD = sd(as.numeric(response))
)
# differences in emphasis
dat %>%
group_by(emphasis) %>%
summarize(
mean = mean(as.numeric(response)),
SD = sd(as.numeric(response))
)
# differences in fragment type
dat %>%
group_by(fragment_type) %>%
summarize(
mean = mean(as.numeric(response)),
SD = sd(as.numeric(response))
)
# read in data
all.dat <- read.csv("dat_pilot_study.csv", sep=";", header=TRUE)
nrow(all.dat)
# data sorting and cleaning
# put all filler items in a seperate data set
fillerDat <- all.dat[all.dat$trial_type == "Filler",]
# rename column in filler dataset to varying acceptabiltiy of filler stimuli (A-E)
colnames(fillerDat)[colnames(fillerDat) == "fragmentType_Acceptability"] = "acceptability"
# only use critical items for analysis
dat <- all.dat[all.dat$trial_type == "Critical",]
# rename column with fragment type
colnames(dat)[colnames(dat) == "fragmentType_Acceptability"] = "fragment_type"
nrow(dat)
# 168 in pilot study
nrow(dat) == nrow(fillerDat)
# differences in emphasis
dat %>%
group_by(emphasis) %>%
summarize(
mean = mean(as.numeric(response)),
SD = sd(as.numeric(response))
)
View(dat)
View(dat)
mean(with$response)
with <- dat[dat$emphasis == "with",]
mean(with$response)
without <- dat[dat$emphasis == "without",]
mean(without$response)
# differences in emphasis
dat %>%
group_by(emphasis) %>%
summarize(
mean = mean(as.numeric(response)),
SD = sd(as.numeric(response))
)
# differences in responses depending on emphasis, modality, and fragment type
dat %>% group_by(emphasis, modality, fragment_type) %>%
summarize(mean = mean(as.numeric(response)),
SD = sd(as.numeric(response)))
dat %>% group_by(gender, education) %>%
summarize(mean = mean(as.numeric(response)),
SD = sd(as.numeric(response)))
# differences in responses depending on emphasis, modality, and fragment type
group_by(dat$emphasis, dat$modality, dat$fragment_type) %>%
summarize(mean = mean(as.numeric(response)),
SD = sd(as.numeric(response)))
# differences in responses depending on emphasis, modality, and fragment type
dat %>% dat(
group_by(emphasis, modality, fragment_type) %>%
summarize(mean = mean(as.numeric(response)),
SD = sd(as.numeric(response))))
str(dat)
# differences in responses depending on emphasis, modality, and fragment type
dat %>%
group_by(emphasis, modality, fragment_type) %>%
summarize(mean = mean(response),
SD = sd(response))
library("dplyr")
# differences in responses depending on emphasis, modality, and fragment type
dat %>%
group_by(emphasis, modality, fragment_type) %>%
summarize(mean = mean(as.numeric(response), na.rm = TRUE),
SD = sd(as.numeric(response), na.rm= TRUE))
# differences in responses depending on emphasis, modality, and fragment type
dat %>%
group_by("emphasis", "modality", "fragment_type") %>%
summarize(mean = mean(as.numeric(response)),
SD = sd(as.numeric(response)))
dat %>%
group_by(emphasis, modality, fragment_type) %>%
count()
dat %>%
count(group_by(emphasis, modality, fragment_type)) == 0
dat %>% mosaicplot(emphasis, modality, fragment_type)
dat %>% mosaicplot(emphasis, modality)
?mosaicplot
mosaicplot(dat$fragment_type, dat$emphasis)
mosaicplot(count(dat$fragment_type), count(dat$emphasis)
mosaicplot(count(dat$fragment_type), count(dat$emphasis))
dat %>%
group_by(modality) %>%
summarize(mean = mean(as.numeric(response)),
SD = sd(as.numeric(response)))
dat %>%
group_by(emphasis) %>%
distinct(response)
# differences in responses depending on emphasis, modality, and fragment type
dat %>%
group_by(emphasis, modality, fragment_type) %>%
summarize(mean = mean(as.numeric(response)),
SD = sd(as.numeric(response)))
