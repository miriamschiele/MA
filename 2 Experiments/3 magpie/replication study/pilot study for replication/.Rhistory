install.packages(c("BH", "blob", "brms", "broom", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "digest", "distributional", "dplyr", "dtplyr", "fansi", "fastmap", "fs", "future", "gargle", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "jsonlite", "loo", "markdown", "Matrix", "modelr", "openssl", "parallelly", "pillar", "plotly", "posterior", "ps", "Rcpp", "RcppParallel", "rlang", "rmarkdown", "rstantools", "sourcetools", "testthat", "tibble", "tinytex", "utf8", "vctrs", "xfun", "xts"))
install.packages(c("BH", "blob", "brms", "broom", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "digest", "distributional", "dplyr", "dtplyr", "fansi", "fastmap", "fs", "future", "gargle", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "jsonlite", "loo", "markdown", "Matrix", "modelr", "openssl", "parallelly", "pillar", "plotly", "posterior", "ps", "Rcpp", "RcppParallel", "rlang", "rmarkdown", "rstantools", "sourcetools", "testthat", "tibble", "tinytex", "utf8", "vctrs", "xfun", "xts"))
install.packages(c("BH", "blob", "brms", "broom", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "digest", "distributional", "dplyr", "dtplyr", "fansi", "fastmap", "fs", "future", "gargle", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "jsonlite", "loo", "markdown", "Matrix", "modelr", "openssl", "parallelly", "pillar", "plotly", "posterior", "ps", "Rcpp", "RcppParallel", "rlang", "rmarkdown", "rstantools", "sourcetools", "testthat", "tibble", "tinytex", "utf8", "vctrs", "xfun", "xts"))
setwd("C:/Users/User/Desktop/RA_Franke/set up/study/replication study/pilot study for replication")
setwd("C:/Users/User/Desktop/RA_Franke/set up/study/replication study/pilot study for replication")
# set up
library("tidyverse")
library("brms")
library("faintr")
library("aida")
# these options help Stan run faster
options(mc.cores = parallel::detectCores())
#read in data of pilot study
dat <- read_csv("results.csv") %>%
separate(
# which column to split up
col = group,
# names of the new column to store results
into = c("metaphor", "vignetteLength"),
# separate by which character / reg-exp
sep = ", ",
# automatically (smart-)convert the type of the new cols
convert = T
)
dat <- dat %>%
select(-responseTime) %>%
pivot_wider(names_from = task, values_from = response)
# data sorting by hand (see attached document "categorizing-of-responses.pdf")
# responses are categorized according to Thibodeau & Boroditsky (2011)
# 1=reform: proposed solution suggests investigating the underlying cause of the problem or suggests a particular social reform to treat or inoculate the community
# 2=enforce: proposed solution focuses on the police force or other methods of law enforcement or modifying the criminal justice system
# 3=neither: proposed solution lacked a suggestion
# 4=both: proposed solution includes same number of suggestion for both reform and enforce
# data sorting and cleaning
# solutions of the category "neither" are excluded according to Thibodeau & Boroditsky (2011)
# suggestions in line of "neighborhood watches" are excluded according to Thibodeau & Boroditsky (2015)
dat <- dat %>%
mutate(
response_category = c("both","enforce","enforce","enforce","both","both","reform","enforce","enforce","both","reform","enforce","enforce","reform","enforce","enforce","enforce","reform","enforce","enforce","enforce","enforce","enforce","enforce","reform","enforce","enforce","enforce","enforce","enforce","reform","both","enforce","reform","reform","reform","reform","reform","reform","enforce","reform","reform","enforce","enforce","enforce","enforce","enforce","reform","reform","reform","neither","reform","enforce","reform","both","reform","both","enforce","both","reform"),
response_category = factor(response_category, ordered = T, levels = c("reform", "both", "enforce", "neither"))
) %>%
filter(response_category != "neither")
# participants' comments on pilot study
dat %>% pull(comments) %>% unique()
# gender
table(dat$gender)
# political affiliation
table(dat$affiliation)
